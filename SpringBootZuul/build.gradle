/*
 * This build file was auto generated by running the Gradle 'init' task
 * by '43313' at '9/10/18 11:33 AM' with Gradle 2.13
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.13/userguide/tutorial_java_projects.html
 */

import org.yaml.snakeyaml.Yaml
import org.yaml.snakeyaml.nodes.MappingNode
import org.yaml.snakeyaml.nodes.Node
import org.yaml.snakeyaml.nodes.NodeTuple
import org.yaml.snakeyaml.nodes.ScalarNode
import org.yaml.snakeyaml.DumperOptions
import org.springframework.beans.factory.config.YamlProcessor.DocumentMatcher
import org.springframework.beans.factory.config.YamlPropertiesFactoryBean
import org.springframework.boot.yaml.SpringProfileDocumentMatcher
import org.springframework.core.io.FileSystemResource
import static  org.yaml.snakeyaml.DumperOptions.FlowStyle.BLOCK

//Add constant, repositories and Dependencies
buildscript {    
    ext{
    springBootVersion = '1.5.3.RELEASE'
    }
    repositories {          
          jcenter()
           maven { url "http://repo.spring.io/plugins-release"
                   url "http://repo.spring.io/libs-snapshot"
                   url "http://repo.spring.io/milestone"
           }
           mavenCentral()
    }
    dependencies {	
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.springframework.boot:spring-boot:${springBootVersion}")
        classpath("org.yaml:snakeyaml:1.16")
        classpath("org.cloudfoundry:cf-gradle-plugin:1.1.3")       
    }
}

//Plugin
apply plugin: 'java'
apply plugin: 'eclipse' 
apply plugin: 'maven' 
apply plugin: 'maven-publish' 
apply plugin: 'cloudfoundry' 
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

dependencyManagement {
    imports {
      mavenBom 'org.springframework.cloud:spring-cloud-starter-parent:Brixton.SR4'
    }
}

version = getVersion()
project.version = version

//Task for create project jar
	jar {
	    baseName = 'SpringBootZuuldemo'
	    manifest {
        attributes("Implementation-Title": baseName + "-" + version,
                   "Implementation-Version": version)  
	    }
	 }


   ext{
	    activeProfile = ACTIVE_PROFILE	    
		yaml =  new Yaml()
		file = new File(project.getProjectDir().absolutePath+"/src/main/resources/application.yml")
		apiConfigs = yaml.composeAll(file.newReader())
    
    }
   
  //Jdk version   
  sourceCompatibility = 1.8  
  targetCompatibility = 1.8 
  
  repositories {    
          jcenter()
           maven { url "http://repo.spring.io/plugins-release"
                   url "http://repo.spring.io/libs-snapshot"
                   url "http://repo.spring.io/milestone"
           }
           mavenCentral()
  }
  
  //Add project dependencies
  dependencies {    
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'io.springfox:springfox-swagger2:2.7.0'
    compile 'io.springfox:springfox-swagger-ui:2.7.0'

   // Spring Cloud
   compile('org.springframework.cloud:spring-cloud-starter-eureka:1.1.6.RELEASE')  
   compile('org.springframework.cloud:spring-cloud-netflix-eureka-server:1.1.6.RELEASE')  
   //compile('org.springframework.cloud:spring-cloud-starter-netflix-zuul') 
   compile('org.springframework.cloud:spring-cloud-starter-zuul')  
   
   compile('com.thoughtworks.xstream:xstream:1.4.8')  

     // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    testCompile('org.springframework.boot:spring-boot-starter-test')
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    
  }
  
  //Task for set enivernment and service and deploy in PCF
cloudfoundry {
			def logLevel = "info"
		    for(MappingNode apiConfig:apiConfigs ){
				println "Size of All Profile: " +apiConfig.getValue().size()
				def resetloop = "false"
				for(NodeTuple entry : apiConfig.getValue()){
					if(entry.getKeyNode().getValue().equals("spring")){
						   for(NodeTuple springnodes: entry.getValueNode().getValue()){
						       if(springnodes.getKeyNode().getValue().equals("profiles")){
						       //print spring Node
								if(!matches(springnodes.getValueNode().getValue(),activeProfile)){
									resetloop = "true"
								} 
						       }
								             
							}
							if(resetloop == "true"){
							    break;
							}				
					}else if(entry.getKeyNode().getValue().equals("log")){
					     for(NodeTuple logNode: entry.getValueNode().getValue()){
							    if(logNode.getKeyNode().getValue().equals("level")){
						            logLevel = logNode.getValueNode().getValue()
								    println "Log Level :" + logLevel 
								}
						 }
					}else if(entry.getKeyNode().getValue().equals("pcf")){
					     for(NodeTuple pcfNode: entry.getValueNode().getValue()){
							    if(pcfNode.getKeyNode().getValue().equals("application")){
						            application = pcfNode.getValueNode().getValue()
								    println "application Name :" + application 
								}else if(pcfNode.getKeyNode().getValue().equals("space")){
						            space = pcfNode.getValueNode().getValue() 
								    println "space Name :" + space 
								}else if(pcfNode.getKeyNode().getValue().equals("memory")){
						            def memoryValues = pcfNode.getValueNode().getValue()
						            def memoryValue = memoryValues.substring(0,memoryValues.length()-1)
						            memory = memoryValue.toInteger()
								    println "memory " + memory 
								}else if(pcfNode.getKeyNode().getValue().equals("diskQuota")){
						            def diskQuotaValue = pcfNode.getValueNode().getValue()
						            def diskValue = diskQuotaValue.substring(0,diskQuotaValue.length()-1)
						            diskQuota = diskValue.toInteger()
								    println "diskQuota :" + diskQuota 
								}else if(pcfNode.getKeyNode().getValue().equals("instances")){
						            def instances = pcfNode.getValueNode().getValue().toInteger()
								    println "instances :" + instances 
								}else if(pcfNode.getKeyNode().getValue().equals("organization")){
						            def organization = pcfNode.getValueNode().getValue()
								    println "organization Name :" + organization 
								}else if(pcfNode.getKeyNode().getValue().equals("target")){
						            def target = pcfNode.getValueNode().getValue()
								    println "target Name:" + target 
								} else if(pcfNode.getKeyNode().getValue().equals("uris")){
                                   def urikey = 0
                                   def url=[]

                                   for(ScalarNode urinode : pcfNode.getValueNode().getValue()){
                                       url[urikey] = urinode.getValue()
                                       urikey++
                                    }

                                    if(url.size()>0){
                                       uris=url
                                       println "target Urls:" + uris
                                    }               
                               }
						 }
					}
		        }
		        if(resetloop == "false"){
		           break;
		       }
		
		    }		    
		   
		    env = ["SPRING_PROFILE_ACTIVE" : activeProfile,
		           "ymlFileLoc": "/BOOT-INF/classes/application.yml",
		           "LOG_LEVEL":logLevel,
		           "VERSION":getVersion()		    
		          ]
		     services{
		         "training-db" {
		             label = "user-provided"
		             bind = true
		          }
		     }   
		
		
		buildpack = "https://github.com/cloudfoundry/java-buildpack.git"
		username = cfUsername
		password = cfPassword
		
		println "username :" + username
		println "env :" + env
  }
  
   /**
  * Returns the matche profile from yml
  */
  def matches(currentProfile, activeProfile) {
		def matches = false
		def profiles = currentProfile.split(",")
		profiles.each {
			profile ->
			if(profile.equals(activeProfile)) {
				matches = true
			}		
        }
       return matches
  }
  
  /**
  * Returns the version for the artifact build
  */
  
  def getVersion(){
	   if(project.hasProperty('ARTIFACT_TYPE')){
	      if("$ARTIFACT_TYPE" == "RELEASE"){
	          return "${RELEASE_VERSION}-RC"
	      }else {
	          return "${SNAPSHOT_VERSION}-SNAPSHOT"
	      }
	    }else {
	          return "1.0.0-SNAPSHOT"
	    }  
  }
  
   /**
  * Upload the Archives build in given path
  */
  
  uploadArchives {
    repositories {
       mavenDeployer {
               repository(url: nexusReleaseRepoUrl ) {
                      authentication(userName: nexusUsername , password: nexusPassword )
                }
               /* snapshortRepository(url: nexusSnapshotRepoUrl ) {
                      authentication(userName: nexusUsername , password: nexusPassword )
                }*/
       }
    }
  }
  
  
  
	task wrapper(type: Wrapper) {
		gradleVersion = '2.13'
	}